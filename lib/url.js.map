{"version":3,"sources":["../src/url.js"],"names":["$base_url","get","$request","$router","replaceRouteParameters","route","params","path","uri","defaults","replace","_","val","param","Error","prefix","getRouteDomain","toRoute","relative","query","stringify","protocol","secure","host","port","fragment","length","Url","constructor","request","router","full","href","current","previous","referer","headers","url","to","extra","name","i","routes","hasOwnProperty","value","UrlGenerator"],"mappings":"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","file":"url.js","sourcesContent":["\"use strict\";\n\nimport querystring from \"querystring\";\nimport config from \"saw-config\";\n\nvar $base_url = config.get(\"app.url\", \"\"),\n    $request,\n    $router;\n\n\n// function getRouteDomain(route, params) {\n//\n// }\n//\n// function toRoute(route, $parameters, $absolute)\n// {\n//     $parameters = formatParameters($parameters);\n//\n//     $domain = getRouteDomain(route, $parameters);\n//\n//     $uri = strtr(rawurlencode($this->addQueryString($this->trimUrl(\n//         $root = $this->replaceRoot(route, $domain, $parameters),\n//         $this->replaceRouteParameters($route->uri(), $parameters)\n//     ), $parameters)), $this->dontEncode);\n//\n//     return $absolute ? $uri : '/'.ltrim(str_replace($root, '', $uri), '/');\n// }\n\nfunction replaceRouteParameters(route, params = {}) {\n    var path = route.uri,\n        defaults = route.defaults;\n\n    path = path.replace(/(?:{(.*?)\\?})/g, function (_, val) {\n        var param = params[val];\n\n        if (typeof param === \"undefined\" && typeof defaults[val] !== \"undefined\") {\n            param = defaults[val];\n        }\n\n        delete params[val];\n\n        return typeof param !== \"undefined\" ? param : \"\";\n    });\n\n    path = path.replace(/(?:{(.*?)})/g, function (_, val) {\n        var param = params[val];\n\n        if (typeof param !== \"undefined\") {\n            delete params[val];\n\n            return param;\n        }\n\n        throw new Error(`Required route param [${val}] is missing.`);\n    });\n\n    return route.prefix !== null ? route.prefix + \"/\" + path : path;\n}\n\nfunction getRouteDomain(route, params) {\n\n}\n\nfunction toRoute(route, params, relative) {\n    var path = replaceRouteParameters(route, params),\n        query = querystring.stringify(params),\n        protocol = route.secure === true ? \"https\" : (route.secure === false ? \"http\" : $request.protocol),\n        host = \"\",\n        port = $request.port,\n        fragment = \"\";\n\n    if (query.length > 0) {\n        path = path + \"?\" + query;\n    }\n\n    return relative === true ? `${port}${path}${fragment}` : `${protocol}://${host}${port}${path}${fragment}`;\n}\n\nclass Url {\n    constructor(request = null, router = null) {\n        this.request = request;\n        this.router = router;\n    }\n\n    full() {\n        return $request.href;\n    }\n\n    current() {\n        return $request.path;\n    }\n\n    previous() {\n        var referer = $request.headers[\"referer\"];\n\n        // TODO: get previous url from session\n        var url = typeof referer !== \"undefined\" ? this.to(referer) : \"\";\n\n        return typeof url !== \"undefined\" ? url : this.to(\"/\");\n    }\n\n    to(path, extra = {}, secure = null) {\n\n    }\n\n    route(name, params = {}, relative = false) {\n        for (var i in $router.routes) {\n            if ($router.routes.hasOwnProperty(i)) {\n                var route = $router.routes[i];\n\n                if (route.name == name) {\n                    return toRoute(route, Object.assign({}, params), relative);\n                }\n            }\n        }\n\n        throw new Error(`Route [${name}] not registered.`);\n    }\n\n    get request() {\n        return $request;\n    }\n\n    set request(value) {\n        $request = value;\n    }\n\n    get router() {\n        return $router;\n    }\n\n    set router(value) {\n        $router = value;\n    }\n}\n\nvar UrlGenerator = new Url();\n\nexport default UrlGenerator;"]}