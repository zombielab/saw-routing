{"version":3,"sources":["../src/router.js"],"names":["$routes","$methods","$request","makeRoute","methods","uri","action","callable","method","indexOf","Error","path","split","object","require","Array","isArray","addRoute","route","Router","constructor","verb","get","post","put","patch","delete","match","all","group","find","request","routes","k","hasOwnProperty","regexp","RegExp","exec","index","dispatch","ctx","next","handle"],"mappings":"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","file":"router.js","sourcesContent":["\"use strict\";\n\nimport Route from \"./route\";\nimport NotFoundHttpError from \"./error/not-found-http-error\";\n\nvar $routes = {},\n    $methods = [\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n    ],\n    $request;\n\nfunction makeRoute(methods, uri, action) {\n    var callable;\n\n    // Validating route methods\n    for (let method of methods) {\n        if ($methods.indexOf(method) < 0) {\n            throw new Error(`Invalid route method: ${method}.`);\n        }\n    }\n\n    // Resolve route callback\n    if (typeof action === \"string\") {\n        callable = async function () {\n            var [path, method] = action.split(\"@\"),\n                object = new (require(path));\n\n            return await object[method];\n        };\n    } else if (typeof action === \"object\" && Array.isArray(action)) {\n        callable = async function () {\n            var [path, method] = action,\n                object = new (require(path));\n\n            return await object[method];\n        };\n    } else if (typeof action === \"object\") {\n        // TODO:\n    } else if (typeof action === \"function\") {\n        callable = async function () {\n            return await action;\n        };\n    } else {\n        throw new Error(\"Invalid route callback.\");\n    }\n\n    return new Route(methods, uri, callable);\n}\n\nfunction addRoute(methods, uri, action) {\n    var route = makeRoute(methods, uri, action);\n\n    for (var method of methods) {\n        if (typeof $routes[method] !== \"undefined\") {\n            $routes[method][uri] = route;\n        }\n    }\n\n    return route;\n}\n\nclass Router {\n    constructor() {\n        for (var verb of $methods) {\n            $routes[verb] = {};\n        }\n    }\n\n    get(uri, action) {\n        return addRoute([\"GET\", \"HEAD\"], uri, action);\n    }\n\n    post(uri, action) {\n        return addRoute([\"POST\"], uri, action);\n    }\n\n    put(uri, action) {\n        return addRoute([\"PUT\"], uri, action);\n    }\n\n    patch(uri, action) {\n        return addRoute([\"PATCH\"], uri, action);\n    }\n\n    delete(uri, action) {\n        return addRoute([\"DELETE\"], uri, action);\n    }\n\n    match(methods, uri, action) {\n        return addRoute(methods, uri, action);\n    }\n\n    all(uri, action) {\n        return addRoute($methods, uri, action);\n    }\n\n    // TODO:\n    group() {\n\n    }\n\n    find(request) {\n        var routes = typeof $routes[request.method] !== \"undefined\" ? $routes[request.method] : [];\n\n        for (let k in routes) {\n            if (routes.hasOwnProperty(k)) {\n                var route = routes[k],\n                    regexp = new RegExp(`^${route.path}$`),\n                    match = regexp.exec(request.path);\n\n                if (match !== null && match.index === 0) {\n                    return route;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    async dispatch(ctx, next) {\n        var route = null;\n\n        $request = ctx;\n\n        if ($methods.indexOf(ctx.method) >= 0) {\n            route = this.find(ctx);\n        }\n\n        if (route !== null) {\n            return await route.handle(ctx, next);\n        }\n\n        throw new NotFoundHttpError;\n    }\n\n    get request() {\n        return $request;\n    }\n\n    get routes() {\n        return $routes;\n    }\n}\n\nexport default Router;"]}