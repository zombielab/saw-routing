{"version":3,"sources":["../src/router.js"],"names":["$routes","$verbs","$prefix","makeRoute","methods","uri","action","callable","path","method","split","object","require","Array","isArray","Error","addRoute","route","push","Router","constructor","verb","get","post","put","patch","delete","any","is","match","request","prefix","charAt","substr","length","indexOf","routes","regexp","RegExp","exec","index"],"mappings":"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","file":"router.js","sourcesContent":["\"use strict\";\n\nimport helpers from \"saw-support/helpers\";\nimport Route from \"./route\";\nimport NotFoundHttpError from \"./error/not-found-http-error\";\n\nvar $routes = {},\n    $verbs = [\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n    ],\n    $prefix = \"/\";\n\nfunction makeRoute(methods, uri, action) {\n    var callable;\n\n    switch (typeof action) {\n        case \"string\":\n            callable = function () {\n                var [path, method] = action.split(\"@\"),\n                    object = new (require(path));\n\n                return object[method];\n            };\n            break;\n\n        case \"object\":\n            if (Array.isArray(action) === true) {\n                callable = function () {\n                    var [path, method] = action,\n                        object = new (require(path));\n\n                    return object[method];\n                };\n            } else {\n                callable = function () {\n                    var object = new (require(action.path));\n\n                    return object[action.method];\n                };\n            }\n            break;\n\n        case \"function\":\n            callable = action;\n            break;\n\n        default:\n            throw new Error(\"Invalid route callback.\");\n            break;\n    }\n\n    return new Route(methods, uri, callable);\n}\n\nfunction addRoute(methods, uri, action) {\n    var route = makeRoute(methods, uri, action);\n\n    for (var method of methods) {\n        if (typeof $routes[method] !== \"undefined\") {\n            $routes[method].push(route);\n        }\n    }\n\n    return route;\n}\n\nclass Router {\n    constructor() {\n        for (var verb of $verbs) {\n            $routes[verb] = [];\n        }\n    }\n\n    get(uri, action = null) {\n        return addRoute([\"GET\", \"HEAD\"], uri, action);\n    }\n\n    post(uri, action = null) {\n        return addRoute([\"POST\"], uri, action);\n    }\n\n    put(uri, action = null) {\n        return addRoute([\"PUT\"], uri, action);\n    }\n\n    patch(uri, action = null) {\n        return addRoute([\"PATCH\"], uri, action);\n    }\n\n    delete(uri, action = null) {\n        return addRoute([\"DELETE\"], uri, action);\n    }\n\n    any(uri, action = null) {\n        return addRoute($verbs, uri, action);\n    }\n\n    is() {\n\n    }\n\n    match(request) {\n\n    }\n\n    prefix(uri) {\n        if (uri.charAt(0) == \"/\") {\n            uri = uri.substr(1, uri.length - 1);\n        }\n\n        if (uri.charAt(uri.length - 1) == \"/\") {\n            uri = uri.substr(0, uri.length - 1);\n        }\n\n        return \"/\" + $prefix + \"/\" + uri;\n    }\n\n    match(request) {\n        if ($verbs.indexOf(request.method) >= 0) {\n            var routes = typeof $routes[request.method] !== \"undefined\" ? $routes[request.method] : [];\n\n            for (let route of routes) {\n                var regexp = new RegExp(this.prefix(route.uri)),\n                    match = regexp.exec(request.path);\n\n                if (match !== null && match.index === 0) {\n                    return route;\n                }\n            }\n        }\n\n        throw new NotFoundHttpError;\n    }\n\n    get routes() {\n        return $routes;\n    }\n}\n\nexport default Router;"]}