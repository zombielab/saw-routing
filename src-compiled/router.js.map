{"version":3,"sources":["../src/router.js"],"names":["$routes","$methods","$request","makeRoute","methods","uri","action","callable","method","indexOf","Error","path","split","object","require","Array","isArray","addRoute","route","match_all","pattern","input","result","replace","_","val","push","Router","constructor","verb","get","post","put","patch","delete","only","any","group","find","request","routes","k","hasOwnProperty","regexp","RegExp","match","exec","length","dispatch","ctx","next","route_params","params","error","handle"],"mappings":"AAAA;;;;;;;;;;AAEA;;;;AACA;;;;;;AAEA,IAAIA,UAAU,EAAd;AAAA,IACIC,WAAW,CACP,KADO,EAEP,MAFO,EAGP,MAHO,EAIP,KAJO,EAKP,OALO,EAMP,QANO,CADf;AAAA,IASIC,QATJ;;AAWA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,GAA5B,EAAiCC,MAAjC,EAAyC;AACrC,QAAIC,QAAJ;;AAEA;AACA,SAAK,IAAIC,MAAT,IAAmBJ,OAAnB,EAA4B;AACxB,YAAIH,SAASQ,OAAT,CAAiBD,MAAjB,IAA2B,CAA/B,EAAkC;AAC9B,kBAAM,IAAIE,KAAJ,CAAW,0BAAwBF,MAAO,IAA1C,CAAN;AACH;AACJ;;AAED;AACA,QAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC5BC;AAAA,uDAAW,aAAkB;AACzB,oBAAI,CAACI,IAAD,EAAOH,MAAP,IAAiBF,OAAOM,KAAP,CAAa,GAAb,CAArB;AAAA,oBACIC,SAAS,KAAKC,QAAQH,IAAR,CAAL,GADb;;AAGA,uBAAO,MAAME,OAAOL,MAAP,CAAb;AACH,aALD;;AAAA;AAAA;AAAA;AAAA;AAMH,KAPD,MAOO,IAAI,OAAOF,MAAP,KAAkB,QAAlB,IAA8BS,MAAMC,OAAN,CAAcV,MAAd,CAAlC,EAAyD;AAC5DC;AAAA,wDAAW,aAAkB;AACzB,oBAAI,CAACI,IAAD,EAAOH,MAAP,IAAiBF,MAArB;AAAA,oBACIO,SAAS,KAAKC,QAAQH,IAAR,CAAL,GADb;;AAGA,uBAAO,MAAME,OAAOL,MAAP,CAAb;AACH,aALD;;AAAA;AAAA;AAAA;AAAA;AAMH,KAPM,MAOA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AACnC;AACH,KAFM,MAEA,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AACrCC;AAAA,wDAAW,aAAkB;AACzB,uBAAO,MAAMD,MAAb;AACH,aAFD;;AAAA;AAAA;AAAA;AAAA;AAGH,KAJM,MAIA;AACH,cAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAED,WAAO,oBAAUN,OAAV,EAAmBC,GAAnB,EAAwBE,QAAxB,CAAP;AACH;;AAED,SAASU,QAAT,CAAkBb,OAAlB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwC;AACpC,QAAIY,QAAQf,UAAUC,OAAV,EAAmBC,GAAnB,EAAwBC,MAAxB,CAAZ;;AAEA,SAAK,IAAIE,MAAT,IAAmBJ,OAAnB,EAA4B;AACxB,YAAI,OAAOJ,QAAQQ,MAAR,CAAP,KAA2B,WAA/B,EAA4C;AACxCR,oBAAQQ,MAAR,EAAgBH,GAAhB,IAAuBa,KAAvB;AACH;AACJ;;AAED,WAAOA,KAAP;AACH;;AAED,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,KAA5B,EAAmC;AAC/B,QAAIC,SAAS,EAAb;AACAD,UAAME,OAAN,CAAcH,OAAd,EAAuB,UAAUI,CAAV,EAAaC,GAAb,EAAkB;AACrCH,eAAOI,IAAP,CAAYD,GAAZ;AACH,KAFD;AAGA,WAAOH,MAAP;AACH;;AAED,MAAMK,MAAN,CAAa;AACTC,kBAAc;AACV,aAAK,IAAIC,IAAT,IAAiB5B,QAAjB,EAA2B;AACvBD,oBAAQ6B,IAAR,IAAgB,EAAhB;AACH;AACJ;;AAEDC,QAAIzB,GAAJ,EAASC,MAAT,EAAiB;AACb,eAAOW,SAAS,CAAC,KAAD,EAAQ,MAAR,CAAT,EAA0BZ,GAA1B,EAA+BC,MAA/B,CAAP;AACH;;AAEDyB,SAAK1B,GAAL,EAAUC,MAAV,EAAkB;AACd,eAAOW,SAAS,CAAC,MAAD,CAAT,EAAmBZ,GAAnB,EAAwBC,MAAxB,CAAP;AACH;;AAED0B,QAAI3B,GAAJ,EAASC,MAAT,EAAiB;AACb,eAAOW,SAAS,CAAC,KAAD,CAAT,EAAkBZ,GAAlB,EAAuBC,MAAvB,CAAP;AACH;;AAED2B,UAAM5B,GAAN,EAAWC,MAAX,EAAmB;AACf,eAAOW,SAAS,CAAC,OAAD,CAAT,EAAoBZ,GAApB,EAAyBC,MAAzB,CAAP;AACH;;AAED4B,WAAO7B,GAAP,EAAYC,MAAZ,EAAoB;AAChB,eAAOW,SAAS,CAAC,QAAD,CAAT,EAAqBZ,GAArB,EAA0BC,MAA1B,CAAP;AACH;;AAED6B,SAAK/B,OAAL,EAAcC,GAAd,EAAmBC,MAAnB,EAA2B;AACvB,eAAOW,SAASb,OAAT,EAAkBC,GAAlB,EAAuBC,MAAvB,CAAP;AACH;;AAED8B,QAAI/B,GAAJ,EAASC,MAAT,EAAiB;AACb,eAAOW,SAAShB,QAAT,EAAmBI,GAAnB,EAAwBC,MAAxB,CAAP;AACH;;AAED;AACA+B,YAAQ,CAEP;;AAEDC,SAAKC,OAAL,EAAc;AACV,YAAIC,SAAS,OAAOxC,QAAQuC,QAAQ/B,MAAhB,CAAP,KAAmC,WAAnC,GAAiDR,QAAQuC,QAAQ/B,MAAhB,CAAjD,GAA2E,EAAxF;;AAEA,aAAK,IAAIiC,CAAT,IAAcD,MAAd,EAAsB;AAClB,gBAAIA,OAAOE,cAAP,CAAsBD,CAAtB,CAAJ,EAA8B;AAC1B,oBAAIvB,QAAQsB,OAAOC,CAAP,CAAZ;AAAA,oBACIE,SAAS,IAAIC,MAAJ,CAAY,KAAG1B,MAAMP,IAAK,IAA1B,CADb;AAAA,oBAEIkC,QAAQF,OAAOG,IAAP,CAAYP,QAAQ5B,IAApB,CAFZ;;AAIA,oBAAIkC,UAAU,IAAd,EAAoB;AAChB,2BAAO3B,KAAP;AACH;AACJ;AACJ;;AAED,eAAO,IAAP;AACH;;AAED2B,UAAMN,OAAN,EAAe;AACX,YAAIC,SAAS,OAAOxC,QAAQuC,QAAQ/B,MAAhB,CAAP,KAAmC,WAAnC,GAAiDR,QAAQuC,QAAQ/B,MAAhB,CAAjD,GAA2E,EAAxF;;AAEA,aAAK,IAAIiC,CAAT,IAAcD,MAAd,EAAsB;AAClB,gBAAIA,OAAOE,cAAP,CAAsBD,CAAtB,CAAJ,EAA8B;AAC1B,oBAAIvB,QAAQsB,OAAOC,CAAP,CAAZ;AAAA,oBACI9B,OAAOO,MAAMP,IADjB;;AAGA,oBAAIkC,QAAQ1B,UAAU,IAAIyB,MAAJ,CAAY,KAAGjC,KAAKY,OAAL,CAAa,UAAb,EAAyB,QAAzB,CAAmC,IAAlD,CAAV,EAAiEgB,QAAQ5B,IAAzE,CAAZ;;AAEA,oBAAIkC,MAAME,MAAN,GAAe,CAAnB,EAAsB;AAClB,2BAAO,CAAC7B,KAAD,EAAQ2B,KAAR,CAAP;AACH;AACJ;AACJ;;AAED,cAAM,IAAInC,KAAJ,CAAU,iCAAV,CAAN;AACH;;AAEKsC,YAAN,CAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAAA;;AAAA;AACtBhD,uBAAW+C,GAAX;;AAEAA,gBAAI/B,KAAJ,GAAY,IAAZ;AACA+B,gBAAIE,YAAJ,GAAmB,EAAnB;;AAEA,gBAAI;AACA,oBAAI,CAACjC,KAAD,EAAQkC,MAAR,IAAkB,MAAKP,KAAL,CAAWI,GAAX,CAAtB;AACH,aAFD,CAEE,OAAOI,KAAP,EAAc;AACZ,sBAAM,iCAAN;AACH;;AAEDJ,gBAAI/B,KAAJ,GAAYA,KAAZ;AACA+B,gBAAIE,YAAJ,GAAmBC,MAAnB;;AAEA,mBAAO,MAAMlC,MAAMoC,MAAN,CAAaL,GAAb,EAAkBC,IAAlB,CAAb;AAfsB;AAgBzB;;AAED,QAAIX,OAAJ,GAAc;AACV,eAAOrC,QAAP;AACH;;AAED,QAAIsC,MAAJ,GAAa;AACT,eAAOxC,OAAP;AACH;AArGQ;;kBAwGE2B,M","file":"router.js","sourcesContent":["\"use strict\";\n\nimport Route from \"./route\";\nimport NotFoundHttpError from \"./error/not-found-http-error\";\n\nvar $routes = {},\n    $methods = [\n        \"GET\",\n        \"HEAD\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n    ],\n    $request;\n\nfunction makeRoute(methods, uri, action) {\n    var callable;\n\n    // Validating route methods\n    for (let method of methods) {\n        if ($methods.indexOf(method) < 0) {\n            throw new Error(`Invalid route method: ${method}.`);\n        }\n    }\n\n    // Resolve route callback\n    if (typeof action === \"string\") {\n        callable = async function () {\n            var [path, method] = action.split(\"@\"),\n                object = new (require(path));\n\n            return await object[method];\n        };\n    } else if (typeof action === \"object\" && Array.isArray(action)) {\n        callable = async function () {\n            var [path, method] = action,\n                object = new (require(path));\n\n            return await object[method];\n        };\n    } else if (typeof action === \"object\") {\n        // TODO:\n    } else if (typeof action === \"function\") {\n        callable = async function () {\n            return await action;\n        };\n    } else {\n        throw new Error(\"Invalid route callback.\");\n    }\n\n    return new Route(methods, uri, callable);\n}\n\nfunction addRoute(methods, uri, action) {\n    var route = makeRoute(methods, uri, action);\n\n    for (var method of methods) {\n        if (typeof $routes[method] !== \"undefined\") {\n            $routes[method][uri] = route;\n        }\n    }\n\n    return route;\n}\n\nfunction match_all(pattern, input) {\n    var result = [];\n    input.replace(pattern, function (_, val) {\n        result.push(val);\n    })\n    return result;\n}\n\nclass Router {\n    constructor() {\n        for (var verb of $methods) {\n            $routes[verb] = {};\n        }\n    }\n\n    get(uri, action) {\n        return addRoute([\"GET\", \"HEAD\"], uri, action);\n    }\n\n    post(uri, action) {\n        return addRoute([\"POST\"], uri, action);\n    }\n\n    put(uri, action) {\n        return addRoute([\"PUT\"], uri, action);\n    }\n\n    patch(uri, action) {\n        return addRoute([\"PATCH\"], uri, action);\n    }\n\n    delete(uri, action) {\n        return addRoute([\"DELETE\"], uri, action);\n    }\n\n    only(methods, uri, action) {\n        return addRoute(methods, uri, action);\n    }\n\n    any(uri, action) {\n        return addRoute($methods, uri, action);\n    }\n\n    // TODO:\n    group() {\n\n    }\n\n    find(request) {\n        var routes = typeof $routes[request.method] !== \"undefined\" ? $routes[request.method] : [];\n\n        for (let k in routes) {\n            if (routes.hasOwnProperty(k)) {\n                var route = routes[k],\n                    regexp = new RegExp(`^${route.path}$`),\n                    match = regexp.exec(request.path);\n\n                if (match !== null) {\n                    return route;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    match(request) {\n        var routes = typeof $routes[request.method] !== \"undefined\" ? $routes[request.method] : [];\n\n        for (let k in routes) {\n            if (routes.hasOwnProperty(k)) {\n                var route = routes[k],\n                    path = route.path;\n\n                var match = match_all(new RegExp(`^${path.replace(/({\\w+})/g, \"(\\\\w+)\")}$`), request.path);\n\n                if (match.length > 0) {\n                    return [route, match];\n                }\n            }\n        }\n\n        throw new Error(\"No route matching this request.\");\n    }\n\n    async dispatch(ctx, next) {\n        $request = ctx;\n\n        ctx.route = null;\n        ctx.route_params = [];\n\n        try {\n            var [route, params] = this.match(ctx);\n        } catch (error) {\n            throw new NotFoundHttpError;\n        }\n\n        ctx.route = route;\n        ctx.route_params = params;\n\n        return await route.handle(ctx, next);\n    }\n\n    get request() {\n        return $request;\n    }\n\n    get routes() {\n        return $routes;\n    }\n}\n\nexport default Router;"]}